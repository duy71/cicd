name: cicd

on:
  push:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Login Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Setup Docker Buildx 
        uses: docker/setup-buildx-action@v1 #tien ich CLI mo rong conmand, tang hieu nang docker cmd
        id: buildx

      - name: Build Image
        run: docker build -t duy71/cicd:v1 -f Dockerfile .

      - name : Push  Image 
        run: docker push duy71/cicd:v1


#-----build push ECR
#----Option-01
# name:  Build and Push Image to AWS ECR

# on:
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]

# jobs:
#   build:

#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ap-southeast-1

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       # - name: Login Dockerhub
#       #   uses: docker/login-action@v1
#       #   with:
#       #     username: ${{ secrets.DOCKERHUB_USERNAME }}
#       #     password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

#     - name: Set outputs
#       id: vars
#       run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

#       - name: Build Push Image
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#           ECR_REPOSITORY: salex-repository
#           IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#         run: |     
#           echo "${{ vars.FILE_ENV_DEV }}" > .env
#           echo "${{ vars.RUN_CONTAINER_DEV }}" > run-container.sh
#           docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile-02 .
#           docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG



#---Option-02
# name: Build and Push Image to AWS ECR
# on:
#   push:
#     branches: ['main']
#   pull_request:
#     branches: [ main ]

# env:
#   AWS_REGION: "ap-southeast-1"
#   AWS_ACCOUNT_ID: "743940044914"

# jobs:
#   deploy:
#     name: Push to ECR
#     runs-on: ubuntu-latest

#     # These permissions are needed to interact with GitHub's OIDC Token endpoint.
#     permissions:
#       id-token: write
#       contents: read

#     steps:
#     - name: Checkout
#       uses: actions/checkout@v2

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v1

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v4
#       with:
#         role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/salex_oidc_role
#         aws-region: ${{ env.AWS_REGION }}

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v2
      
#     - name: Set outputs
#       id: vars
#       run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

#     - name: Build, tag, and push docker image to Amazon ECR
#       env:
#         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         REPOSITORY: salex-repository
#         IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#       run: |
#           docker build --cache-from $REGISTRY/$REPOSITORY:latest -t $REGISTRY/$REPOSITORY:latest -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f Dockerfile-02 .
#           docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
#           docker push $REGISTRY/$REPOSITORY:latest
